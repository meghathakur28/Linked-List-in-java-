class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        int count0=0;
        int count1=0;
        int count2=0;
        Node temp=head;
        while(temp!=null)
        {
            if(temp.data  == 0)
            {
                count0++;
                temp=temp.next;
            }
            else if(temp.data == 1)
            {
                count1++;
                temp=temp.next;
            }
            else if(temp.data == 2)
            {
                count2++;
                temp=temp.next;
            }
        }
        if(count0>0)
        {
            Node newNode =new Node(0);
            head=newNode;
            temp=newNode;
            for(int i=1;i<count0;i++)
            {
                Node newNodes=new Node(0);
                temp.next = newNodes;
                temp=temp.next;
            }
        }
        if(count1>0)
        {
            if(count0==0)
            {
                Node newNode =new Node(1);
                head=newNode;
                temp=newNode;
                for(int i=1;i<count1;i++)
                {
                    Node newNodes=new Node(1);
                    temp.next = newNodes;
                    temp=temp.next;
                }
            }
            else
            {
                for(int i=0;i<count1;i++)
                {
                    Node newNodes=new Node(1);
                    temp.next = newNodes;
                    temp=temp.next;
                }
            }
        }
        if(count2>0)
        {
            if(count1==0&&count0==0)
            {
                Node newNode =new Node(2);
                head=newNode;
                temp=newNode;
                for(int i=1;i<count2;i++)
                {
                    Node newNodes=new Node(2);
                    temp.next = newNodes;
                    temp=temp.next;
                }
            }
            else
            {
                for(int i=0;i<count2;i++)
                {
                    Node newNodes=new Node(2);
                    temp.next = newNodes;
                    temp=temp.next;
                }
            }
        }
        return head;
        
    }
}
